#include <iostream>
#include "Consola.h"
#include "Stage.h"
#include "Model.h"

using namespace std;

int Stage::My_Stage[M_STAGE][M_X][M_Y]=
{
{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},			//IF M_STAGE ==0 기본틀
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,2,2,0,0,9},
{9,0,0,0,0,0,0,0,0,2,2,0,0,9},
{9,0,0,1,1,1,1,3,3,2,2,0,0,0},
{9,0,0,1,1,1,1,3,3,2,2,0,0,0},
{9,0,0,0,0,0,0,3,3,2,2,0,0,9},
{9,0,0,0,0,0,0,3,3,2,2,0,0,9},				//character 1 스테이지 1
{9,0,0,0,0,0,0,4,4,4,4,4,4,9},
{9,0,0,0,0,0,0,4,4,4,4,4,4,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,2,2,0,0,0,0,9},
{9,0,0,0,0,0,0,2,2,0,0,0,0,9},
{9,0,0,0,0,0,0,2,2,0,0,0,0,9},
{9,0,0,0,0,0,0,2,2,0,0,0,0,9},
{9,1,1,1,1,0,0,2,2,0,0,0,0,0},
{9,1,1,1,1,0,0,2,2,0,0,0,0,0},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,3,3,0,0,4,4,4,4,4,4,0,0,9},
{9,3,3,0,0,4,4,4,4,4,4,0,0,9},
{9,3,3,0,0,0,0,5,5,5,5,0,0,9},
{9,3,3,0,0,0,0,5,5,5,5,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,5,5,5,5,0,0,0,0,0,0,8,8,9},
{9,5,5,5,5,0,0,0,0,0,0,8,8,9},
{9,2,2,0,0,0,0,6,6,0,0,8,8,9},
{9,2,2,0,0,0,0,6,6,0,0,8,8,9},
{9,2,2,1,1,1,1,6,6,0,0,8,8,0},
{9,2,2,1,1,1,1,6,6,0,0,8,8,0},
{9,2,2,0,0,0,0,6,6,0,0,0,0,9},
{9,2,2,0,0,0,0,6,6,0,0,0,0,9},
{9,3,3,0,0,0,0,0,0,7,7,7,7,9},
{9,3,3,0,0,0,0,0,0,7,7,7,7,9},
{9,3,3,0,0,4,4,4,4,4,4,0,0,9},
{9,3,3,0,0,4,4,4,4,4,4,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,5,5,5,5,0,0,6,6,0,0,8,8,9},
{9,5,5,5,5,0,0,6,6,0,0,8,8,9},
{9,2,2,0,0,0,0,6,6,0,0,8,8,9},
{9,2,2,0,0,0,0,6,6,0,0,8,8,9},
{9,2,2,1,1,1,1,6,6,3,3,8,8,0},
{9,2,2,1,1,1,1,6,6,3,3,8,8,0},
{9,2,2,0,0,0,0,0,0,3,3,0,0,9},
{9,2,2,0,0,0,0,0,0,3,3,0,0,9},
{9,0,0,0,0,0,0,0,0,7,7,7,7,9},
{9,0,0,0,0,0,0,0,0,7,7,7,7,9},
{9,0,0,0,0,0,0,4,4,4,4,4,4,9},
{9,0,0,0,0,0,0,4,4,4,4,4,4,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},			//character2() 스테이지 1
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,1,1,1,1,0,0,3,3,0,0,0,0,9},
{9,1,1,1,1,0,0,3,3,0,0,0,0,9},
{9,4,4,4,4,4,4,3,3,0,0,0,0,9},
{9,4,4,4,4,4,4,3,3,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,9,9,0,0,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,5,5,5,5,0,0,0,0,0,0,0,0,9},
{9,5,5,5,5,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,0,0,0,0,0,0,9},
{9,0,0,2,2,0,0,4,4,4,4,4,4,9},
{9,0,0,2,2,0,0,4,4,4,4,4,4,9},
{9,0,0,1,1,1,1,3,3,0,0,0,0,9},
{9,0,0,1,1,1,1,3,3,0,0,0,0,9},
{9,0,0,0,0,0,0,3,3,0,0,0,0,9},
{9,0,0,0,0,0,0,3,3,0,0,0,0,9},
{9,9,9,0,0,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,5,5,5,5,0,0,0,0,9},
{9,0,0,0,0,5,5,5,5,0,0,0,0,9},
{9,0,0,0,0,6,6,0,0,0,0,0,0,9},
{9,0,0,0,0,6,6,0,0,0,0,0,0,9},
{9,0,0,2,2,6,6,0,0,0,0,0,0,9},
{9,0,0,2,2,6,6,0,0,0,0,0,0,9},
{9,0,0,2,2,6,6,4,4,4,4,4,4,9},
{9,0,0,2,2,6,6,4,4,4,4,4,4,9},
{9,0,0,2,2,0,0,0,0,0,0,3,3,9},
{9,0,0,2,2,0,0,0,0,0,0,3,3,9},
{9,1,1,1,1,0,0,7,7,7,7,3,3,9},
{9,1,1,1,1,0,0,7,7,7,7,3,3,9},
{9,9,9,0,0,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,2,2,0,0,0,0,0,0,8,8,9},
{9,0,0,2,2,0,0,0,0,0,0,8,8,9},
{9,0,0,2,2,0,0,7,7,7,7,8,8,9},
{9,0,0,2,2,0,0,7,7,7,7,8,8,9},
{9,0,0,2,2,0,0,5,5,5,5,8,8,9},
{9,0,0,2,2,0,0,5,5,5,5,8,8,9},
{9,0,0,1,1,1,1,3,3,6,6,0,0,9},
{9,0,0,1,1,1,1,3,3,6,6,0,0,9},
{9,0,0,0,0,0,0,3,3,6,6,0,0,9},
{9,0,0,0,0,0,0,3,3,6,6,0,0,9},
{9,4,4,4,4,4,4,0,0,6,6,0,0,9},
{9,4,4,4,4,4,4,0,0,6,6,0,0,9},
{9,9,9,0,0,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,1,1,1,1,0,0,0,0,9},
{9,0,0,0,0,1,1,1,1,0,0,0,0,9},
{9,5,5,5,5,3,3,2,2,6,6,0,0,0},			//character3() 스테이지 1
{9,5,5,5,5,3,3,2,2,6,6,0,0,0},
{9,0,0,0,0,3,3,2,2,6,6,0,0,9},
{9,0,0,0,0,3,3,2,2,6,6,0,0,9},
{9,4,4,4,4,4,4,2,2,6,6,0,0,9},
{9,4,4,4,4,4,4,2,2,6,6,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,0,0,0,0,6,6,9},
{9,0,0,0,0,0,0,0,0,0,0,6,6,9},
{9,1,1,1,1,2,2,0,0,0,0,6,6,9},
{9,1,1,1,1,2,2,0,0,0,0,6,6,9},
{9,5,5,5,5,2,2,0,0,0,0,6,6,0},			
{9,5,5,5,5,2,2,0,0,0,0,6,6,0},
{9,0,0,3,3,2,2,0,0,7,7,7,7,9},
{9,0,0,3,3,2,2,0,0,7,7,7,7,9},
{9,0,0,3,3,0,0,4,4,4,4,4,4,9},
{9,0,0,3,3,0,0,4,4,4,4,4,4,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,7,7,7,7,0,0,6,6,2,2,0,0,9},
{9,7,7,7,7,0,0,6,6,2,2,0,0,9},
{9,4,4,4,4,4,4,6,6,2,2,0,0,9},
{9,4,4,4,4,4,4,6,6,2,2,0,0,9},
{9,5,5,5,5,3,3,6,6,2,2,0,0,0},			
{9,5,5,5,5,3,3,6,6,2,2,0,0,0},
{9,8,8,0,0,3,3,0,0,1,1,1,1,9},
{9,8,8,0,0,3,3,0,0,1,1,1,1,9},
{9,8,8,0,0,0,0,0,0,0,0,0,0,9},
{9,8,8,0,0,0,0,0,0,0,0,0,0,9},
{9,8,8,0,0,0,0,0,0,0,0,0,0,9},
{9,8,8,0,0,0,0,0,0,0,0,0,0,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,0,0,2,2,0,0,9},
{9,0,0,0,0,0,0,0,0,2,2,0,0,9},
{9,0,0,0,0,0,0,0,0,2,2,3,3,9},
{9,0,0,0,0,0,0,0,0,2,2,3,3,9},
{9,1,1,1,1,5,5,5,5,2,2,3,3,0},		
{9,1,1,1,1,5,5,5,5,2,2,3,3,0},
{9,8,8,0,0,4,4,4,4,4,4,6,6,9},
{9,8,8,0,0,4,4,4,4,4,4,6,6,9},
{9,8,8,0,0,0,0,7,7,7,7,6,6,9},
{9,8,8,0,0,0,0,7,7,7,7,6,6,9},
{9,8,8,0,0,0,0,0,0,0,0,6,6,9},
{9,8,8,0,0,0,0,0,0,0,0,6,6,9},
{9,9,9,9,9,9,9,9,9,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,8,8,6,6,3,3,0,0,2,2,9},
{9,0,0,8,8,6,6,3,3,0,0,2,2,9},
{9,0,0,8,8,6,6,3,3,0,0,2,2,9},
{9,0,0,8,8,6,6,3,3,0,0,2,2,9},
{9,0,0,8,8,6,6,1,1,1,1,2,2,9},			//character4() 스테이지 1
{9,0,0,8,8,6,6,1,1,1,1,2,2,9},
{9,0,0,0,0,0,0,4,4,4,4,4,4,9},
{9,0,0,0,0,0,0,4,4,4,4,4,4,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,0,0,0,0,0,0,0,0,0,0,0,0,9},
{9,9,9,9,9,9,9,0,0,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,3,3,0,0,0,0,9},
{9,0,0,0,0,0,0,3,3,0,0,0,0,9},
{9,0,0,0,0,0,0,3,3,0,0,0,0,9},
{9,0,0,0,0,0,0,3,3,0,0,0,0,9},
{9,0,0,6,6,8,8,5,5,5,5,0,0,9},			
{9,0,0,6,6,8,8,5,5,5,5,0,0,9},
{9,2,2,6,6,8,8,4,4,4,4,4,4,9},
{9,2,2,6,6,8,8,4,4,4,4,4,4,9},
{9,2,2,6,6,8,8,0,0,0,0,0,0,9},
{9,2,2,6,6,8,8,0,0,0,0,0,0,9},
{9,2,2,7,7,7,7,1,1,1,1,0,0,9},
{9,2,2,7,7,7,7,1,1,1,1,0,0,9},
{9,9,9,9,9,9,9,0,0,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,0,0,0,0,3,3,0,0,2,2,9},
{9,0,0,0,0,0,0,3,3,0,0,2,2,9},
{9,4,4,4,4,4,4,3,3,0,0,2,2,9},
{9,4,4,4,4,4,4,3,3,0,0,2,2,9},
{9,5,5,5,5,6,6,7,7,7,7,2,2,9},			
{9,5,5,5,5,6,6,7,7,7,7,2,2,9},
{9,0,0,0,0,6,6,0,0,8,8,0,0,9},
{9,0,0,0,0,6,6,0,0,8,8,0,0,9},
{9,0,0,0,0,6,6,0,0,8,8,0,0,9},
{9,0,0,0,0,6,6,0,0,8,8,0,0,9},
{9,0,0,0,0,1,1,1,1,8,8,0,0,9},
{9,0,0,0,0,1,1,1,1,8,8,0,0,9},
{9,9,9,9,9,9,9,0,0,9,9,9,9,9}},

{{9,9,9,9,9,9,9,9,9,9,9,9,9,9},
{9,0,0,4,4,4,4,4,4,0,0,0,0,9},
{9,0,0,4,4,4,4,4,4,0,0,0,0,9},
{9,0,0,0,0,6,6,3,3,0,0,0,0,9},
{9,0,0,0,0,6,6,3,3,0,0,0,0,9},
{9,0,0,2,2,6,6,3,3,0,0,0,0,9},			
{9,0,0,2,2,6,6,3,3,0,0,0,0,9},
{9,0,0,2,2,6,6,0,0,8,8,0,0,9},
{9,0,0,2,2,6,6,0,0,8,8,0,0,9},
{9,0,0,2,2,5,5,5,5,8,8,0,0,9},
{9,0,0,2,2,5,5,5,5,8,8,0,0,9},
{9,1,1,1,1,7,7,7,7,8,8,0,0,9},
{9,1,1,1,1,7,7,7,7,8,8,0,0,9},
{9,9,9,9,9,9,9,0,0,9,9,9,9,9}}

};


void Stage::Map_Print(int Stage)
{
	for(int i=Stage-1;i<Stage;i++)
		for(int j=0;j<M_X;j++){
			gotoxy(12,5+j);
			for(int k=0;k<M_Y;k++){
				if(My_Stage[i][j][k]==9){
					textcolor(WHITE);cout << "■";}
				else if(My_Stage[i][j][k]==0){
					textcolor(WHITE);cout << "  ";}
				else if(My_Stage[i][j][k]==1){
					textcolor(RED); cout << "■";}
				else if(My_Stage[i][j][k]==2){
					textcolor(BLUE);cout << "■";}
				else if(My_Stage[i][j][k]==3){
					textcolor(GREEN);cout << "■";}
				else if(My_Stage[i][j][k]==4){
					textcolor(CYAN);cout << "■";}
				else if(My_Stage[i][j][k]==5){
					textcolor(MAGENTA);cout << "■";}
				else if(My_Stage[i][j][k]==6){
					textcolor(BROWN);cout << "■";}
				else if(My_Stage[i][j][k]==7){
					textcolor(LIGHTBLUE);cout << "■";}
				else if(My_Stage[i][j][k]==8){
					textcolor(LIGHTGREEN);cout << "■";}
			}
		}
}

int Stage::Find_X(int Stage,int Block_N)			//블록 X좌표 찾기
{
	for(int i=Stage-1;i<Stage;i++)
		for(int j=0;j<M_X;j++)
			for(int k=0;k<M_Y;k++)
			{
				if(My_Stage[i][j][k]==(Block_N-48))
				{
					return j;
				}
			}
}

int Stage::Find_Y(int Stage,int Block_N)			//블록 Y좌표 찾기
{
	for(int i=Stage-1;i<Stage;i++)
		for(int j=0;j<M_X;j++)
			for(int k=0;k<M_Y;k++)
			{
				if(My_Stage[i][j][k]==(Block_N-48))				//아스키코드 1=49
				{
					return k;
				}
			}
}

void Stage::Trans_Matrix(int Key,int stage,int Block_N,int x,int y,int *_step)		//블록을 옮길수 있는지 검사 후 변환
{
	switch(Block_N)				//선택된 블록에 따라서
	{
	case '1':
		if((Key==M_LEFTKEY)&&(My_Stage[stage-1][x][y-1]==0))				//왼쪽이 공백이면 왼쪽으로 한칸이동
		{
			My_Stage[stage-1][x][y+3]=0;
			My_Stage[stage-1][x+1][y+3]=0;
			My_Stage[stage-1][x][y-1]=1;
			My_Stage[stage-1][x+1][y-1]=1;
			(*_step)++;
		}
		else if((Key==M_RIGHTKEY)&&(My_Stage[stage-1][x][y+4]==0))
		{
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x+1][y]=0;
			My_Stage[stage-1][x][y+4]=1;
			My_Stage[stage-1][x+1][y+4]=1;
			(*_step)++;
		}
		break;
	case '2':
		if((Key==M_UPKEY)&&(My_Stage[stage-1][x-1][y]==0))				//아랫쪽이 공백이면 아래로 한칸이동
		{
			My_Stage[stage-1][x-1][y]=2;
			My_Stage[stage-1][x-1][y+1]=2;
			My_Stage[stage-1][x+5][y]=0;
			My_Stage[stage-1][x+5][y+1]=0;
			(*_step)++;
		}
		else if((Key==M_DOWNKEY)&&(My_Stage[stage-1][x+6][y]==0))
		{
			My_Stage[stage-1][x+6][y]=2;
			My_Stage[stage-1][x+6][y+1]=2;
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x][y+1]=0;
			(*_step)++;
		}
		break;
	case '3':
		if((Key==M_UPKEY)&&(My_Stage[stage-1][x-1][y]==0))				//아랫쪽이 공백이면 아래로 한칸이동
		{
			My_Stage[stage-1][x-1][y]=3;
			My_Stage[stage-1][x-1][y+1]=3;
			My_Stage[stage-1][x+3][y]=0;
			My_Stage[stage-1][x+3][y+1]=0;
			(*_step)++;
		}
		else if((Key==M_DOWNKEY)&&(My_Stage[stage-1][x+4][y]==0))
		{
			My_Stage[stage-1][x+4][y]=3;
			My_Stage[stage-1][x+4][y+1]=3;
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x][y+1]=0;
			(*_step)++;
		}
		break;
	case '4':
		if((Key==M_LEFTKEY)&&(My_Stage[stage-1][x][y-1]==0))				//왼쪽이 공백이면 왼쪽으로 한칸이동
		{
			My_Stage[stage-1][x][y+5]=0;
			My_Stage[stage-1][x+1][y+5]=0;
			My_Stage[stage-1][x][y-1]=4;
			My_Stage[stage-1][x+1][y-1]=4;
			(*_step)++;
		}
		else if((Key==M_RIGHTKEY)&&(My_Stage[stage-1][x][y+6]==0))
		{
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x+1][y]=0;
			My_Stage[stage-1][x][y+6]=4;
			My_Stage[stage-1][x+1][y+6]=4;
			(*_step)++;
		}
		break;
	case '5':
		if((Key==M_LEFTKEY)&&(My_Stage[stage-1][x][y-1]==0))				//왼쪽이 공백이면 왼쪽으로 한칸이동
		{
			My_Stage[stage-1][x][y+3]=0;
			My_Stage[stage-1][x+1][y+3]=0;
			My_Stage[stage-1][x][y-1]=5;
			My_Stage[stage-1][x+1][y-1]=5;
			(*_step)++;
		}
		else if((Key==M_RIGHTKEY)&&(My_Stage[stage-1][x][y+4]==0))
		{
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x+1][y]=0;
			My_Stage[stage-1][x][y+4]=5;
			My_Stage[stage-1][x+1][y+4]=5;
			(*_step)++;
		}
		break;
	case '6':
		if((Key==M_UPKEY)&&(My_Stage[stage-1][x-1][y]==0))				//아랫쪽이 공백이면 아래로 한칸이동
		{
			My_Stage[stage-1][x-1][y]=6;
			My_Stage[stage-1][x-1][y+1]=6;
			My_Stage[stage-1][x+5][y]=0;
			My_Stage[stage-1][x+5][y+1]=0;
			(*_step)++;
		}
		else if((Key==M_DOWNKEY)&&(My_Stage[stage-1][x+6][y]==0))
		{
			My_Stage[stage-1][x+6][y]=6;
			My_Stage[stage-1][x+6][y+1]=6;
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x][y+1]=0;
			(*_step)++;
		}
		break;
	case '7':
		if((Key==M_LEFTKEY)&&(My_Stage[stage-1][x][y-1]==0))				//왼쪽이 공백이면 왼쪽으로 한칸이동
		{
			My_Stage[stage-1][x][y+3]=0;
			My_Stage[stage-1][x+1][y+3]=0;
			My_Stage[stage-1][x][y-1]=7;
			My_Stage[stage-1][x+1][y-1]=7;
			(*_step)++;
		}
		else if((Key==M_RIGHTKEY)&&(My_Stage[stage-1][x][y+4]==0))
		{
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x+1][y]=0;
			My_Stage[stage-1][x][y+4]=7;
			My_Stage[stage-1][x+1][y+4]=7;
			(*_step)++;
		}
		break;
	case '8':
		if((Key==M_UPKEY)&&(My_Stage[stage-1][x-1][y]==0))				//아랫쪽이 공백이면 아래로 한칸이동
		{
			My_Stage[stage-1][x-1][y]=8;
			My_Stage[stage-1][x-1][y+1]=8;
			My_Stage[stage-1][x+5][y]=0;
			My_Stage[stage-1][x+5][y+1]=0;
			(*_step)++;
		}
		else if((Key==M_DOWNKEY)&&(My_Stage[stage-1][x+6][y]==0))
		{
			My_Stage[stage-1][x+6][y]=8;
			My_Stage[stage-1][x+6][y+1]=8;
			My_Stage[stage-1][x][y]=0;
			My_Stage[stage-1][x][y+1]=0;
			(*_step)++;
		}
	}
	Map_Print(stage);
}

bool Stage::End_Block(int stage,int _Character)					//메인 캐릭터가 목표에 들어가면 게임종료
{
	switch(_Character)
	{
	case 1:
		if(My_Stage[stage-1][5][13]==0)
			return true;
		else
			return false;
	case 2:
		if(My_Stage[stage-1][13][3]==0)
			return true;
		else
			return false;
	case 3:
		if(My_Stage[stage-1][5][13]==0)
			return true;
		else
			return false;
	}
}